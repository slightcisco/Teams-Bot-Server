---
#
#                      CISCO SAMPLE CODE LICENSE
#                             Version 1.1
#             Copyright (c) 2017 Cisco and/or its affiliates
#
# These terms govern this Cisco Systems, Inc. (“Cisco”), example or demo source
# code and its associated documentation (together, the “Sample Code”). By
# downloading, copying, modifying, compiling, or redistributing the Sample Code,
#  you accept and agree to be bound by the following terms and conditions
#  (the “License”). If you are accepting the License on behalf of an entity, you
#  represent that you have the authority to do so
#  (either you or the entity, “you”). Sample Code is not supported by Cisco TAC
#  and is not tested for quality or performance. This is your only license to the
#  Sample Code and all rights not expressly granted are reserved.
#
# 1. LICENSE GRANT:   Subject to the terms and conditions of this License, Cisco
#    hereby grants to you a perpetual, worldwide, non-exclusive,
#    non-transferable, non-sublicensable, royalty-free license to copy and modify
#    the Sample Code in source code form, and compile and redistribute the Sample
#    Code in binary/object code or other executable forms, in whole or in part,
#    solely for use with Cisco products and services. For interpreted languages
#    like Java and Python, the executable form of the software may include source
#    code and compilation is not required.
#
# 2. CONDITIONS:      You shall not use the Sample Code independent of, or to
#    replicate or compete with, a Cisco product or service. Cisco products and
#    services are licensed under their own separate terms and you shall not use
#    the Sample Code in any way that violates or is inconsistent with those terms
#    (for more information, please visit: www.cisco.com/go/terms).
#
# 3. OWNERSHIP:       Cisco retains sole and exclusive ownership of the Sample Code,
#    including all intellectual property rights therein, except with respect to
#    any third-party material that may be used in or by the Sample Code. Any such
#    third-party material is licensed under its own separate terms
#    (such as an open source license) and all use must be in full accordance with
#    the applicable license. This License does not grant you permission to use
#    any trade names, trademarks, service marks, or product names of Cisco. If
#    you provide any feedback to Cisco regarding the Sample Code, you agree that
#    Cisco, its partners, and its customers shall be free to use and incorporate
#    such feedback into the Sample Code, and Cisco products and services, for any
#    purpose, and without restriction, payment, or additional consideration of
#    any kind. If you initiate or participate in any litigation against Cisco,
#    its partners, or its customers (including cross-claims and counter-claims)
#    alleging that the Sample Code and/or its use infringe any patent, copyright,
#    or other intellectual property right, then all rights granted to you under
#    this License shall terminate immediately without notice.
#
# 4. LIMITATION OF LIABILITY: CISCO SHALL HAVE NO LIABILITY IN CONNECTION WITH OR
#    RELATING TO THIS LICENSE OR USE OF THE SAMPLE CODE, FOR DAMAGES OF ANY KIND,
#    INCLUDING BUT NOT LIMITED TO DIRECT, INCIDENTAL, AND CONSEQUENTIAL DAMAGES,
#    OR FOR ANY LOSS OF USE, DATA, INFORMATION, PROFITS, BUSINESS, OR GOODWILL,
#    HOWEVER CAUSED, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
#
# 5. DISCLAIMER OF WARRANTY: SAMPLE CODE IS INTENDED FOR EXAMPLE PURPOSES ONLY
#    AND IS PROVIDED BY CISCO “AS IS” WITH ALL FAULTS AND WITHOUT WARRANTY OR
#    SUPPORT OF ANY KIND. TO THE MAXIMUM EXTENT PERMITTED BY LAW, ALL EXPRESS AND
#    IMPLIED CONDITIONS, REPRESENTATIONS, AND WARRANTIES INCLUDING, WITHOUT
#    LIMITATION, ANY IMPLIED WARRANTY OR CONDITION OF MERCHANTABILITY, FITNESS
#    FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, SATISFACTORY QUALITY,
#    NON-INTERFERENCE, AND ACCURACY, ARE HEREBY EXCLUDED AND EXPRESSLY DISCLAIMED
#    BY CISCO. CISCO DOES NOT WARRANT THAT THE SAMPLE CODE IS SUITABLE FOR
#    PRODUCTION OR COMMERCIAL USE, WILL OPERATE PROPERLY, IS ACCURATE OR COMPLETE,
#    OR IS WITHOUT ERROR OR DEFECT.
#
# 6. GENERAL:         This License shall be governed by and interpreted in accordance
#    with the laws of the State of California, excluding its conflict of laws
#    provisions. You agree to comply with all applicable United States export
#    laws, rules, and regulations. If any provision of this License is judged
#    illegal, invalid, or otherwise unenforceable, that provision shall be
#    severed and the rest of the License shall remain in full force and effect.
#    No failure by Cisco to enforce any of its rights related to the Sample Code
#    or to a breach of this License in a particular situation will act as a
#    waiver of such rights. In the event of any inconsistencies with any other
#    terms, this License shall take precedence.
#
#
# This playbook will prompt the user to enter source/destination IP address, protocol, and port.
# Contracts will be created between the EPGs where the IP addresses have been located.
#
#Toggle **debug:** true/false to display debug information.


# Gather required details
- name:                              Set facts
  hosts:                             "{{ apic }}"
  gather_facts:                      no

# Enter variable details
  vars:
    scope:         "context"
    src_ip_addr:   "DEFAULT"
    dst_ip_addr:   "DEFAULT"
    subj_name:     "DEFAULT"
    dest_port:     "DEFAULT"
    apic:          "apic-01.uktme.cisco.com"
    apic_username: "admin"
    apic_password: "C!5co123"
    bot_token:     "ZmYwMjRmYjEtNWM4ZC00NGQ0LTk3NmMtNTZhZDE1ZmM0OTc4ZDEzMTk4OWUtMDhj_PF84_1eb65fdf-9643-417f-9974-ad72cae0e10f"
    room_id:       "Y2lzY29zcGFyazovL3VzL1JPT00vZWQ2MTUwMzAtODc3Mi0xMWU5LTkwMDUtZDNmZGQyZDcxMWE4"

  tasks:
    # Set facts for use in subsequent playbooks
    - name:                          Set fact for user entered source IP address
      set_fact:
        src_ip_addr:                 "{{ src_ip_addr }}"
        dst_ip_addr:                 "{{ dst_ip_addr }}"
        subj_name:                   "{{ subj_name }}"
        dst_port:                    "{{ dst_port }}"
        scope:                       "{{ scope }}"
        flt_name:                    "{{ subj_name }}_src_port_any_to_dst_port_{{ dst_port}}"

# Step 1
# Take an ACI config snapshot before proceeding
- name:                              Step 1  Create a snapshot
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Create a Snapshot
      aci_config_snapshot:
        host:                        '{{ apic }}'
        username:                    '{{ apic_username }}'
        password:                    '{{ apic_password }}'
        validate_certs:              no
        state:                       present
        export_policy:               config_backup
        max_count:                   10
        description:                 Snapshot Created by Ansible

# Step 2
# Get source IP Endpoint details
- name:                              Step 2  Retrieve Source IP ACI Details
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    # Check source IP is registered on the fabric and discover it's EPG
    - name:                          Get Tenant, App Profile and EPG for Source IP address
      aci_rest:
        host:                        "{{ apic }}"
        username:                    "{{ apic_username }}"
        password:                    "{{ apic_password }}"
        validate_certs:              no
        use_proxy:                   no
        method:                      get
        path:                        /api/node/class/fvCEp.json?query-target-filter=and(eq(fvCEp.ip,"{{ src_ip_addr }}"))
      register:                      cons_epg

    # Fail playbook if supplied source IP address doesn't exist on the ACI fabric
    - name:                          End playbook if source IP does not exist
      fail:
        msg:                         "Source IP address does not exist on the ACI Fabric"
      when:                          cons_epg.imdata | length == 0


      # Extract Tenant, App Profile and EPG from returned data
    - name:                          Extract the DN of the source_epg and save in new var called src_epg_dn
      set_fact:
        cons_epg_dn :                 "{{ cons_epg.imdata[0].fvCEp.attributes.dn }}"

    - name:                          Split the cons_epg_dn
      set_fact:
        cons_epg_info :               "{{ cons_epg_dn.split('/')}} "

    - name:                          Set source variables
      set_fact:
        cons_tn_name :               "{{ cons_epg_info[1] | regex_replace('^tn-','') }}"
        cons_ap_name :               "{{ cons_epg_info[2] | regex_replace('^ap-','') }}"
        cons_epg_name :              "{{ cons_epg_info[3] | regex_replace('^epg-','') }}"

    # Comment out this debug section as required
    - name:                          Source Endpoint ACI Fabric Details
      debug:
        msg:
          - "Consumer Tenant Name:     [{{ cons_tn_name }}]"
          - "Consumer App Profile Name: [{{ cons_ap_name }}]"
          - "Consumer EPG Name:        [{{ cons_epg_name }}]"

    # could print this to teams?

# Step 3
# Get destination IP Endpoint details
- name:                              Step 3  Retrieve Destination IP ACI Details
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    # Check destination IP is registered on the fabric and discover it's EPG
    - name:                          Get Tenant, App Profile and EPG for Destination IP address
      aci_rest:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          method:                    get
          path:                      /api/node/class/fvCEp.json?query-target-filter=and(eq(fvCEp.ip,"{{ dst_ip_addr }}"))
      register:                      prov_epg

    # Print the failt to teams
    - name:                          Print to teams if destination IP does not exist
      cisco_spark:
        recipient_type: roomId
        recipient_id: "{{room_id}}"
        message_type: text
        personal_token: "{{bot_token}}"
        message: "Destination IP address does not exist on the ACI Fabric"
      when:             prov_epg.imdata | length == 0

    # Fail playbook if supplied destination IP address doesn't exist on the ACI fabric
    - name:                          End playbook if destination IP does not exist
      fail:
        msg:                         "Destination IP address does not exist on the ACI Fabric"
      when:                          prov_epg.imdata | length == 0

    # Start extracting the destination EPG information
    - name:                          Extract the DN of the destination_epg and save in new var called dst_epg_dn
      set_fact:
        prov_epg_dn :                 "{{ prov_epg.imdata[0].fvCEp.attributes.dn }}"

    - name:                          Split the prov_epg_dn
      set_fact:
        prov_epg_info :               "{{ prov_epg_dn.split('/')}} "

    - name:                          Set destination variables
      set_fact:
        prov_tn_name :               "{{ prov_epg_info[1] | regex_replace('^tn-','') }}"
        prov_ap_name :               "{{ prov_epg_info[2] | regex_replace('^ap-','') }}"
        prov_epg_name :              "{{ prov_epg_info[3] | regex_replace('^epg-','') }}"

    # Comment out this debug section as required
    - name:                          Destination Endpoint ACI Fabric Details
      debug:
        msg:
          - "Provider Tenant Name: [{{ prov_tn_name }}]"
          - "provider App Profile Name: [{{ prov_ap_name }}]"
          - "Provider EPG Name:   [{{ prov_epg_name }}]"

    # could print this to teams?

# Step 4
# Create the filter
- name:                              Step 4  Create Filter
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Create Filter
      aci_filter:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          tenant:                    "common"
          filter:                    "{{ subj_name }}_src_port_any_to_dst_port_{{ dst_port }}"
          state:                     "present"
      register:                      flt

# Step 5
# Create new tcp filter  entry
- name:                              Step 5  Create Filter Entry
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Create Filter Entry
      aci_filter_entry:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          filter:                    "{{ subj_name }}_src_port_any_to_dst_port_{{ dst_port }}"
          entry:                     "src_port_any_to_dst_port_{{ dst_port }}"
          tenant:                    "common"
          ether_type:                "ip"
          ip_protocol:               "{{ subj_name }}"
          dst_port:                  "{{ dst_port }}"
          state:                     "present"
      register:                      flt_entry

# Step 6
# Create the contract
- name:                              Step 6  Create contract
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    # Using the destination IP tenant information here (prov_tn_name)
    # for the location of the new contract
    - name:                          Create Contract
      aci_rest:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          path:                      /api/node/mo/uni/tn-{{ prov_tn_name }}/brc-permit_to_{{ prov_ap_name }}_{{ prov_epg_name }}.json
          method:                    post
          content:
            vzBrCP:
              attributes:
                name:                "permit_to_{{ prov_ap_name }}_{{ prov_epg_name }}"
                scope:               "{{ scope }}"
                status:              "created,modified"

    - name:                          Define the contract tenant name
      set_fact:
        cont_name:                   "permit_to_{{ prov_ap_name }}_{{ prov_epg_name }}"
      register:                      cont_name

# Step 7
# Add the subject and filter
- name:                              Step 7  Add the Subject and Filter
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Add the subject and filter
      aci_rest:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          path:                      /api/node/mo/uni/tn-{{ prov_tn_name }}/brc-permit_to_{{ prov_ap_name }}_{{ prov_epg_name }}/subj-{{ subj_name }}.json
          method:                    post
          content:
            vzSubj:
              attributes:
                name:                "{{ subj_name }}"
                status:              "created,modified"
              children:
                -
                 vzRsSubjFiltAtt:
                   attributes:
                     tnVzFilterName: "{{ flt_name }}"
                     status:         "created,modified"
      register:                      subj_and_flt

# Step 8
# Bind the contract to the source EPG
- name:                              Step 8  Bind Contract to Provider EPG
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Bind Contract to Provider EPG
      aci_epg_to_contract:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          tenant:                    "{{ prov_tn_name }}"
          ap:                        "{{ prov_ap_name }}"
          epg:                       "{{ prov_epg_name }}"
          contract:                  "{{ cont_name }}"
          contract_type:             provider
          state:                     present
      register:                      prov_epg_contract

# Step 9
# Bind the contract to the destination EPG
- name:                              Step 9  Bind Contract to Consumer EPG
  hosts:                             "{{ apic }}"
  connection:                        local
  gather_facts:                      no

  tasks:
    - name:                          Bind to Consumer EPG
      aci_epg_to_contract:
          host:                      "{{ apic }}"
          username:                  "{{ apic_username }}"
          password:                  "{{ apic_password }}"
          validate_certs:            no
          use_proxy:                 no
          tenant:                    "{{ cons_tn_name }}"
          ap:                        "{{ cons_ap_name }}"
          epg:                       "{{ cons_epg_name }}"
          contract:                  "{{ cont_name }}"
          contract_type:             consumer
          state:                     present
      register:                      cons_epg_contract
